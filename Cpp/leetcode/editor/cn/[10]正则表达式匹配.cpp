//给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。 
//
// 
// '.' 匹配任意单个字符 
// '*' 匹配零个或多个前面的那一个元素 
// 
//
// 所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。 
// 
//
// 示例 1： 
//
// 
//输入：s = "aa" p = "a"
//输出：false
//解释："a" 无法匹配 "aa" 整个字符串。
// 
//
// 示例 2: 
//
// 
//输入：s = "aa" p = "a*"
//输出：true
//解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
// 
//
// 示例 3： 
//
// 
//输入：s = "ab" p = ".*"
//输出：true
//解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
// 
//
// 示例 4： 
//
// 
//输入：s = "aab" p = "c*a*b"
//输出：true
//解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
// 
//
// 示例 5： 
//
// 
//输入：s = "mississippi" p = "mis*is*p*."
//输出：false 
//
// 
//
// 提示： 
//
// 
// 0 <= s.length <= 20 
// 0 <= p.length <= 30 
// s 可能为空，且只包含从 a-z 的小写字母。 
// p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。 
// 保证每次出现字符 * 时，前面都匹配到有效的字符 
// 
// Related Topics 递归 字符串 动态规划 
// 👍 2293 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
/**
 * 本题的解题思路：
 * 本题是一个动态规划问题,思路详见笔记
 */
class Solution {
public:
    bool isMatch(string s, string p) {
        //获取匹配串与模式串的字符长度以便于计算
        int n = s.size(), m = p.size();
        //将第一位空出便于后面从下标1开始运算
        s = ' ' + s, p = ' ' + p;
        //创建状态转移矩阵
        vector <vector<bool>> f(n + 1, vector<bool>(m + 1));
        //初始化第一个状态,即什么都没有
        f[0][0] = true;
        //这里从0开始是因为即使匹配串为空也可能符合模式串的要求
        for (int i = 0; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                //遇到下一位是*的此位直接跳过，将此位与后面的*一起处理
                //防止越界，需要多加一个判断
                if (j + 1 <= m && p[j + 1] == '*') continue;
                if (i && p[j] != '*') {
                    f[i][j] = f[i - 1][j - 1] && (s[i] == p[j] || p[j] == '.');
                } else if (p[j] == '*') {
                    //因为这里需要看下标为i-1的值因此需要i不为零
                    //因为这里的j下标指向的是*，所以需要与j-1下标的进行匹配
                    f[i][j] = f[i][j - 2] || i && f[i - 1][j] && (s[i] == p[j - 1] || p[j - 1] == '.');
                }
            }
        }
        return f[n][m];
    }
};
//leetcode submit region end(Prohibit modification and deletion)
